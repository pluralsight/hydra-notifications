container.startup.timeout = 60s
container.metrics.reporters.Slf4j.enabled = false

container {
  http {
    port = 8080
    port = ${?PORT_NUMBER}
    cidr {
      # This is a list of IP ranges to allow through. Can be empty.
      allow = ["0.0.0.0/0"]
      deny = []
    }
  }
}

hydra.notifications.endpoints = ["hydra.notifications.http.NotificationsEndpoint"]

hydra.notifications.services.opsgenie.token = "OPSGENIE_TOKEN"
hydra.notifications.services.opsgenie.token = ${?OPSGENIE_TOKEN}

hydra.notifications.services.slack.token = "SLACK_TOKEN"
hydra.notifications.services.slack.token = ${?SLACK_TOKEN}

akka {
  cluster.roles = ["hydra-notifications"]
  discovery {
    method = akka-consul
    method = ${?SERVICE_DISCOVERY_METHOD}
    akka-consul {
      consul-host = ${?CONSUL_HOST}
      consul-port = 8500
    }
  }
  management {
    cluster.bootstrap {
      contact-point-discovery {
        service-name = "hydra"
      }
    }
  }
  actor {
    provider = cluster
    provider = ${?AKKA_ACTOR_PROVIDER}
  }

  remote {
    artery {
      canonical.hostname = ${?AKKA_REMOTE_ARTERY_CANONICAL_HOST_NAME}
      advanced {
        maximum-frame-size = 2MiB
        buffer-pool-size = 128
        maximum-large-frame-size = 4MiB
        large-buffer-pool-size = 32
        idle-cpu-level = 5
        idle-cpu-level = ${?AKKA_REMOTE_ARTERY_ADVANCED_IDLE_CPU_LEVEL}
      }
    }
  }
  http.server.remote-address-header = on
  logger-startup-timeout = 30s
}

consul { //only relevant if using akka discovery consul
  datacenter = dc1
  datacenter = ${?CONSUL_DATACENTER}
  http { //the consul HTTP interface
    host = localhost
    host = ${?CONSUL_HOST}
    port = 8500
  }
}